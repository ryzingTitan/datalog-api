openapi: 3.0.0
info:
  description: Swagger spec for the Datalog API project
  version: 5.0.0
  title: datalog-api
servers:
  - url: http://localhost:8080/api
    description: Local deployment
paths:
  /cars:
    get:
      tags:
        - Cars
      description: Retrieve all cars
      responses:
        200:
          description: The list of cars
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Car'
        401:
          description: Unauthorized - Ensure the authorization token is valid
        500:
          description: Internal Server Error

    post:
      tags:
        - Car Administration
      description: Create a new car
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Car'
      responses:
        201:
          description: Car created successfully
        400:
          description: Bad Request - Ensure the request contains all required data
        401:
          description: Unauthorized - Ensure the authorization token is valid
        409:
          description: Conflict - Car already exists
        500:
          description: Internal Server Error

  /cars/{carId}:
    put:
      parameters:
        - name: carId
          in: path
          description: The car id to be updated
          required: true
          schema:
            type: integer
            example: 1
      tags:
        - Car Administration
      description: Update an existing car
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Car'
      responses:
        200:
          description: Car updated successfully
        400:
          description: Bad Request - Ensure the request contains all required data
        401:
          description: Unauthorized - Ensure the authorization token is valid
        410:
          description: Gone - Car does not exist
        500:
          description: Internal Server Error
    delete:
      parameters:
        - name: carId
          in: path
          description: The car id to be deleted
          required: true
          schema:
            type: integer
            example: 1
      tags:
        - Car Administration
      description: Delete an existing car
      responses:
        200:
          description: Car deleted successfully
        400:
          description: Bad Request - Ensure the request contains all required data
        401:
          description: Unauthorized - Ensure the authorization token is valid
        500:
          description: Internal Server Error

  /sessions/{sessionId}/datalogs:
    get:
      parameters:
        - name: sessionId
          in: path
          description: The session id to be used in the search query
          required: true
          schema:
            type: integer
            example: 5
      tags:
        - Datalogs
      description: Retrieve all datalogs with the given session id sorted by timestamp ascending
      responses:
        200:
          description: The list of datalogs with the given session id sorted by timestamp ascending
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Datalog'
        400:
          description: Bad Request - Ensure the query parameter has been included in the request
        401:
          description: Unauthorized - Ensure the authorization token is valid
        500:
          description: Internal Server Error

  /sessions:
    get:
      parameters:
        - name: userEmail
          in: query
          description: The email address of the current user
          required: true
          schema:
            type: string
            format: email
            example: test@test.com
      tags:
        - Sessions
      description: Retrieve sessions by user
      responses:
        200:
          description: All sessions associated with the provided user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
        400:
          description: Bad Request - Ensure the query parameter has been included in the request
        401:
          description: Unauthorized - Ensure the authorization token is valid
        500:
          description: Internal Server Error
    post:
      tags:
        - Session Administration
      description: Create a new session from a file
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                userEmail:
                  type: string
                  format: email
                  description: The email address of the user associated with the file
                  example: test@test.com
                userFirstName:
                  type: string
                  description: The first name of the user associated with the file
                  example: Test
                userLastName:
                  type: string
                  description: The last name of the user associated with the file
                  example: Tester
                carId:
                  type: string
                  description: The id of the car associated with the file
                  example: 1
                trackId:
                  type: string
                  description: The id of the track associated with the file
                  example: 1
                uploadFile:
                  type: string
                  format: binary
      responses:
        201:
          description: Session created successfully
        400:
          description: Bad Request - Ensure the request contains all required data
        401:
          description: Unauthorized - Ensure the authorization token is valid
        409:
          description: Conflict - Session already exists
        500:
          description: Internal Server Error

  /sessions/{sessionId}:
    put:
      parameters:
        - name: sessionId
          in: path
          description: The session id to be updated
          required: true
          schema:
            type: integer
            example: 5
      tags:
        - Session Administration
      description: Update an existing session from a file
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                userEmail:
                  type: string
                  format: email
                  description: The email address of the user associated with the file
                  example: test@test.com
                userFirstName:
                  type: string
                  description: The first name of the user associated with the file
                  example: Test
                userLastName:
                  type: string
                  description: The last name of the user associated with the file
                  example: Tester
                carId:
                  type: string
                  description: The id of the car associated with the file
                  example: 1
                trackId:
                  type: string
                  description: The id of the track associated with the file
                  example: 2
                uploadFile:
                  type: string
                  format: binary
      responses:
        200:
          description: Session updated successfully
        400:
          description: Bad Request - Ensure the request contains all required data
        401:
          description: Unauthorized - Ensure the authorization token is valid
        410:
          description: Gone - Session does not exist
        500:
          description: Internal Server Error

  /tracks:
    get:
      tags:
        - Tracks
      description: Retrieve all tracks
      responses:
        200:
          description: The list of tracks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Track'
        401:
          description: Unauthorized - Ensure the authorization token is valid
        500:
          description: Internal Server Error

    post:
      tags:
        - Track Administration
      description: Create a new track
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Track'
      responses:
        201:
          description: Track created successfully
        400:
          description: Bad Request - Ensure the request contains all required data
        401:
          description: Unauthorized - Ensure the authorization token is valid
        409:
          description: Conflict - Track already exists
        500:
          description: Internal Server Error

  /tracks/{trackId}:
    put:
      parameters:
        - name: trackId
          in: path
          description: The track id to be updated
          required: true
          schema:
            type: integer
            example: 1
      tags:
        - Track Administration
      description: Update an existing track
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Track'
      responses:
        200:
          description: Track updated successfully
        400:
          description: Bad Request - Ensure the request contains all required data
        401:
          description: Unauthorized - Ensure the authorization token is valid
        410:
          description: Gone - Track does not exist
        500:
          description: Internal Server Error
    delete:
      parameters:
        - name: trackId
          in: path
          description: The track id to be deleted
          required: true
          schema:
            type: integer
            example: 1
      tags:
        - Track Administration
      description: Delete an existing track
      responses:
        200:
          description: Track deleted successfully
        400:
          description: Bad Request - Ensure the request contains all required data
        401:
          description: Unauthorized - Ensure the authorization token is valid
        500:
          description: Internal Server Error

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Car:
      type: object
      properties:
        id:
          type: integer
          description: The car id
          example: 2
        year:
          type: integer
          description: The year of the car
          example: 2001
        make:
          type: string
          description: The make of the car
          example: Volkswagen
        model:
          type: string
          description: The model of the car
          example: Jetta
    Datalog:
      type: object
      properties:
        sessionId:
          type: integer
          description: The session id of the datalog
          example: 5
        timestamp:
          type: string
          format: date-time
          description: The timestamp of the datalog
          example: 2022-09-18T18:15:47.968Z
        longitude:
          type: number
          format: double
          description: The longitude location where the data was recorded
          example: -86.14170333333335
        latitude:
          type: number
          format: double
          description: The latitude location where the data was recorded
          example: 42.406800000000004
        altitude:
          type: number
          format: float
          description: The altitude where the data was recorded in meters
          example: 188.6
        intakeAirTemperature:
          type: integer
          format: int32
          description: The intake air temperature in degrees Fahrenheit
          example: 135
        boostPressure:
          type: number
          format: float
          description: The boost pressure in PSI
          example: 15.6
        coolantTemperature:
          type: integer
          format: int32
          description: The coolant temperature in degrees Fahrenheit
          example: 150
        engineRpm:
          type: integer
          format: int32
          description: The engine RPM
          example: 5000
        speed:
          type: integer
          format: int32
          description: The speed of the vehicle in MPH
          example: 85
        throttlePosition:
          type: number
          format: float
          description: The current percentage of the throttle position
          example: 75.6
        airFuelRatio:
          type: number
          format: float
          description: The current air fuel ratio
          example: 14.6
    Session:
      type: object
      properties:
        id:
          type: integer
          description: The session id
          example: 5
        startTime:
          type: string
          format: date-time
          description: The start time of the session
          example: 2022-09-18T18:15:47.968Z
        endTime:
          type: string
          format: date-time
          description: The end time of the session
          example: 2022-09-18T18:18:47.968Z
        trackName:
          type: string
          description: The name of the track associated with the session
          example: Test Track
        trackLatitude:
          type: number
          format: double
          description: The latitude location of the track associated with the session
          example: 42.406800000000004
        trackLongitude:
          type: number
          format: double
          description: The longitude location of the track associated with the session
          example: -86.14170333333335
        carYear:
          type: integer
          description: The year of the car associated with the session
          example: 2001
        carMake:
          type: string
          description: The make of the car associated with the session
          example: Volkswagen
        carModel:
          type: string
          description: The model of the car associated with the session
          example: Jetta
    Track:
      type: object
      properties:
        id:
          type: integer
          description: The track id
          example: 5
        name:
          type: string
          description: The name of the track
          example: Test Track
        latitude:
          type: number
          format: double
          description: The latitude location of the track
          example: 42.406800000000004
        longitude:
          type: number
          format: double
          description: The longitude location of the track
          example: -86.14170333333335

security:
  - bearerAuth: []